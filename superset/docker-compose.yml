
# -----------------------------------------------------------------------
# Shared volume mounts for all Superset containers
# -----------------------------------------------------------------------
x-superset-volumes: &superset-volumes
  # 1) Init & bootstrap scripts
  - ./docker:/app/docker:ro
  # 2a) Python‑path lookup for your custom config
  - ./superset_config.py:/app/pythonpath/superset_config.py:ro
  # 2b) /etc/superset lookup for your custom config
  - ./superset_config.py:/etc/superset/superset_config.py:ro
  # 3) Persist Superset home (metadata, cache, logs)
  - superset_home:/app/superset_home
  # 4) Mount your local ./assets so it appears under superset/static/assets/images
  - ./assets/images/Sentryhawk:/app/superset/static/assets/images/Sentryhawk:ro
  - ./assets/images/Sentryhawk/favicon/favicon.ico:/app/superset/favicon.ico:ro
  - ./assets:/app/pythonpath/superset/static/assets:ro
  # Override default loading spinner
  - ./assets/images/loading.gif:/app/superset/static/assets/images/loading.gif:ro
  # Run command to find out hash string (loading.<hash>.gif): docker exec -it superset_app find /app -type f -name "loading*.gif"
  - ./assets/images/loading.gif:/app/superset/static/assets/loading.cff8a5da.gif:ro

services:
  # ---------------------------------------------------------------------
  # Redis: rate‑limit store, cache backend, Celery broker & result backend
  # ---------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data                   # Persist Redis data

  # ---------------------------------------------------------------------
  # One‑time init: DB migrations, admin user creation, sample data
  # ---------------------------------------------------------------------
  superset-init:
    image: apache/superset:latest
    container_name: superset_init
    command: >
      bash -c "
        if [ ! -f /app/superset_home/.initialized ]; then
          echo 'Running one-time Superset setup...' &&
          superset db upgrade &&
          superset fab create-admin \
            --username ${ADMIN_USERNAME} \
            --firstname ${ADMIN_FIRSTNAME} \
            --lastname ${ADMIN_LASTNAME} \
            --email ${ADMIN_EMAIL} \
            --password ${ADMIN_PASSWORD} &&
          superset init &&
          touch /app/superset_home/.initialized;
        else
          echo 'Superset already initialized. Skipping setup.';
        fi
      "
    env_file:
      - .env                             # Loads DB creds, ADMIN_*, SECRET_KEY, etc.
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
    depends_on:
      - redis
    restart: "no"
    volumes: *superset-volumes

  # ---------------------------------------------------------------------
  # Superset web server (Gunicorn)
  # ---------------------------------------------------------------------
  superset:
    image: apache/superset:latest
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    env_file:
      - .env
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
      # Gunicorn tuning for m5.large
      - SERVER_WORKER_AMOUNT=5           # 2 vCPU → (2*2)+1 = 5 workers
      - SERVER_THREADS_AMOUNT=20         # threads per worker
      - GUNICORN_TIMEOUT=120             # request timeout in seconds
      # - GUNICORN_KEEPALIVE=2           # leave default or bump if you have many idle connections
    ports:
      - "8088:8088"                      # Expose Superset UI
    depends_on:
      - redis
      - superset-init
    restart: unless-stopped
    volumes: *superset-volumes

  # ---------------------------------------------------------------------
  # Celery worker (asynchronous query execution)
  # ---------------------------------------------------------------------
  superset-worker:
    image: apache/superset:latest
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - .env
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
      - CELERY_BROKER_URL=redis://superset_cache:6379/2
      - CELERY_RESULT_BACKEND=redis://superset_cache:6379/3
    depends_on:
      - superset-init
    restart: unless-stopped
    volumes: *superset-volumes

  # ---------------------------------------------------------------------
  # Celery beat (scheduled jobs: alerts, reports, etc.)
  # ---------------------------------------------------------------------
  superset-worker-beat:
    image: apache/superset:latest
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - .env
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
      - CELERY_BROKER_URL=redis://superset_cache:6379/2
      - CELERY_RESULT_BACKEND=redis://superset_cache:6379/3
    depends_on:
      - superset-init
    restart: unless-stopped
    volumes: *superset-volumes

# -----------------------------------------------------------------------
# Named volumes (persistent storage)
# -----------------------------------------------------------------------
volumes:
  superset_home:  # Superset metadata, cache, logs
  redis:          # Redis data
