{
  "Comment": "CVE State Machine",
  "StartAt": "Invoke Vendor Lambda",
  "States": {
    "Ingestion Specs": {
      "Type": "Pass",
      "Next": "Druid Ingestion Iterator",
      "Result": {
        "files": [
          "ingestion_spec_lookup.json",
          "ingestion_spec_ytd_global.json",
          "ingestion_spec_ytd_vendor.json",
          "ingestion_spec_ytd_product.json",
          "ingestion_spec_monthly_global.json",
          "ingestion_spec_monthly_vendor.json",
          "ingestion_spec_monthly_product.json",
          "ingestion_spec_daily_global.json",
          "ingestion_spec_daily_vendor.json",
          "ingestion_spec_daily_product.json",
          "ingestion_spec_daily_global_running.json",
          "ingestion_spec_daily_vendor_running.json",
          "ingestion_spec_daily_product_running.json"
        ]
      },
      "ResultPath": "$.IngestionFiles"
    },
    "Druid Ingestion Iterator": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Invoke Druid Task",
        "States": {
          "Invoke Druid Task": {
            "Type": "Task",
            "QueryLanguage": "JSONata",
            "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
            "Output": "{% $states.result.Payload %}",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "Wait for Druid Task",
            "Arguments": "{% {'FunctionName': 'cve_ingestion_druid_lambda', 'Payload': {'filename': $states.input.filename}} %}"
          },
          "Wait for Druid Task": {
            "Type": "Wait",
            "Seconds": 20,
            "Next": "Invoke Druid Task Poll",
            "QueryLanguage": "JSONata"
          },
          "Invoke Druid Task Poll": {
            "Type": "Task",
            "QueryLanguage": "JSONata",
            "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
            "Arguments": "{% { 'FunctionName': 'cve_ingestion_druid_polling_lambda', 'Payload': $states.input } %}",
            "Output": "{% $states.result.Payload %}",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "Druid Task Status"
          },
          "Druid Task Status": {
            "Type": "Choice",
            "Default": "Wait for Druid Task",
            "Choices": [
              {
                "Next": "Druid Task Successful",
                "Condition": "{% $contains($states.input, \"\\\"status\\\": \\\"SUCCESS\\\", \\\"full_status\\\"\") %}"
              },
              {
                "Next": "Druid Task Failed",
                "Condition": "{% $contains($states.input, \"\\\"status\\\": \\\"FAILED\\\", \\\"full_status\\\"\") %}"
              },
              {
                "Next": "Druid Task Failed",
                "Condition": "{% $contains($states.input, \"\\\"errorMessage\\\"\") %}"
              }
            ],
            "QueryLanguage": "JSONata"
          },
          "Druid Task Failed": {
            "Type": "Task",
            "QueryLanguage": "JSONata",
            "Resource": "arn:aws:states:::sns:publish.waitForTaskToken",
            "Arguments": {
              "Message": "{% $states.input & '\n\nDruid task failed. Resume the pipeline after fixing task: https://8icj443bt1.execute-api.us-east-2.amazonaws.com/prod/resume?taskToken={{Task.Token}}' %}",
              "TopicArn": "arn:aws:sns:us-east-2:692859941232:cve_sns_topic"
            },
            "Next": "Invoke Druid Task"
          },
          "Druid Task Successful": {
            "Type": "Succeed",
            "QueryLanguage": "JSONata"
          }
        }
      },
      "MaxConcurrency": 1,
      "ItemsPath": "$.IngestionFiles.files",
      "End": true,
      "ItemSelector": {
        "filename.$": "$$.Map.Item.Value"
      }
    },
    "Invoke Vendor Lambda": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "arn:aws:lambda:us-east-2:692859941232:function:cve_ingestion_vendor_lambda:$LATEST",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Initial Wait",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "Vendor Lambda Failed",
          "Next": "Vendor Lambda Failed"
        }
      ]
    },
    "Vendor Lambda Failed": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Resource": "arn:aws:states:::sns:publish.waitForTaskToken",
      "Arguments": {
        "TopicArn": "arn:aws:sns:us-east-2:692859941232:cve_sns_topic",
        "Message": "Vendor Lambda Failed. Resume the pipeline after fixing: https://8icj443bt1.execute-api.us-east-2.amazonaws.com/prod/resume?taskToken={{Task.Token}}"
      },
      "Next": "Invoke Vendor Lambda"
    },
    "Initial Wait": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Vendor SQS Poll"
    },
    "Vendor SQS Poll": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Arguments": {
        "QueueUrl": "https://sqs.us-east-2.amazonaws.com/692859941232/cve_ingestion_vendor_sqs",
        "AttributeNames": [
          "ApproximateNumberOfMessages",
          "ApproximateNumberOfMessagesNotVisible"
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
      "Next": "Vendor Queue Check"
    },
    "Vendor Queue Check": {
      "Type": "Choice",
      "QueryLanguage": "JSONata",
      "Choices": [
        {
          "Next": "Vendor DLQ Poll",
          "Condition": "{% ($states.input.Attributes.ApproximateNumberOfMessages ~> $number = 0 and $states.input.Attributes.ApproximateNumberOfMessagesNotVisible ~> $number = 0) %}"
        }
      ],
      "Default": "Wait for Vendors"
    },
    "Vendor DLQ Poll": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Arguments": {
        "QueueUrl": "https://sqs.us-east-2.amazonaws.com/692859941232/cve_ingestion_vendor_sqs_dlq",
        "AttributeNames": [
          "ApproximateNumberOfMessages",
          "ApproximateNumberOfMessagesNotVisible"
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
      "Next": "Vendor DLQ Check"
    },
    "Vendor DLQ Check": {
      "Type": "Choice",
      "QueryLanguage": "JSONata",
      "Choices": [
        {
          "Next": "Product SQS Poll",
          "Condition": "{% ($states.input.Attributes.ApproximateNumberOfMessages ~> $number = 0 and $states.input.Attributes.ApproximateNumberOfMessagesNotVisible ~> $number = 0) %}"
        }
      ],
      "Default": "Vendors Not Processed"
    },
    "Product SQS Poll": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Arguments": {
        "QueueUrl": "https://sqs.us-east-2.amazonaws.com/692859941232/cve_ingestion_vendor_product_sqs",
        "AttributeNames": [
          "ApproximateNumberOfMessages",
          "ApproximateNumberOfMessagesNotVisible"
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
      "Next": "Product Queue Check"
    },
    "Product Queue Check": {
      "Type": "Choice",
      "QueryLanguage": "JSONata",
      "Choices": [
        {
          "Next": "Product DLQ Poll",
          "Condition": "{% ($states.input.Attributes.ApproximateNumberOfMessages ~> $number = 0 and $states.input.Attributes.ApproximateNumberOfMessagesNotVisible ~> $number = 0) %}"
        }
      ],
      "Default": "Wait for Products"
    },
    "Product DLQ Poll": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Arguments": {
        "QueueUrl": "https://sqs.us-east-2.amazonaws.com/692859941232/cve_ingestion_vendor_product_sqs_dlq",
        "AttributeNames": [
          "ApproximateNumberOfMessages",
          "ApproximateNumberOfMessagesNotVisible"
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
      "Next": "Product DLQ Check"
    },
    "Product DLQ Check": {
      "Type": "Choice",
      "QueryLanguage": "JSONata",
      "Choices": [
        {
          "Next": "Wait for Firehose",
          "Condition": "{% ($states.input.Attributes.ApproximateNumberOfMessages ~> $number = 0 and $states.input.Attributes.ApproximateNumberOfMessagesNotVisible ~> $number = 0) %}"
        }
      ],
      "Default": "Products Not Processed"
    },
    "Wait for Firehose": {
      "Type": "Wait",
      "Seconds": 910,
      "Next": "Glue Jobs"
    },
    "Glue Jobs": {
      "Type": "Pass",
      "Next": "Glue Job Iterator",
      "Result": {
        "jobs": [
          "cve_staging_glue",
          "cve_staging_glue_dq",
          "cve_production_glue",
          "cve_production_materialized_views_glue"
        ]
      },
      "ResultPath": "$.GlueJobs"
    },
    "Glue Job Iterator": {
      "Type": "Map",
      "ItemsPath": "$.GlueJobs.jobs",
      "MaxConcurrency": 1,
      "ItemSelector": {
        "jobname.$": "$$.Map.Item.Value"
      },
      "Iterator": {
        "StartAt": "Glue Job",
        "States": {
          "Glue Job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::glue:startJobRun.sync",
            "Parameters": {
              "JobName.$": "$.jobname"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Comment": "Glue Job Failed",
                "Next": "Glue Job Failed"
              }
            ],
            "Next": "Glue Job Successful"
          },
          "Glue Job Failed": {
            "Type": "Task",
            "QueryLanguage": "JSONata",
            "Resource": "arn:aws:states:::sns:publish.waitForTaskToken",
            "Arguments": {
              "Message": "{% $states.input & '\n\nGlue job failed. Resume the pipeline after fixing job: https://8icj443bt1.execute-api.us-east-2.amazonaws.com/prod/resume?taskToken={{Task.Token}}' %}",
              "TopicArn": "arn:aws:sns:us-east-2:692859941232:cve_sns_topic"
            },
            "Next": "Glue Job"
          },
          "Glue Job Successful": {
            "Type": "Succeed"
          }
        }
      },
      "Next": "Ingestion Specs"
    },
    "Products Not Processed": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Resource": "arn:aws:states:::sns:publish.waitForTaskToken",
      "Arguments": {
        "TopicArn": "arn:aws:sns:us-east-2:692859941232:cve_sns_topic",
        "Message": "Product DLQ is not empty. Resume the pipeline after redrive: https://8icj443bt1.execute-api.us-east-2.amazonaws.com/prod/resume?taskToken={{Task.Token}}"
      },
      "Next": "Wait for Firehose"
    },
    "Wait for Products": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Product SQS Poll"
    },
    "Vendors Not Processed": {
      "Type": "Task",
      "QueryLanguage": "JSONata",
      "Resource": "arn:aws:states:::sns:publish.waitForTaskToken",
      "Arguments": {
        "TopicArn": "arn:aws:sns:us-east-2:692859941232:cve_sns_topic",
        "Message": "Vendor DLQ is not empty. Resume the pipeline after redrive: https://8icj443bt1.execute-api.us-east-2.amazonaws.com/prod/resume?taskToken={{Task.Token}}"
      },
      "Next": "Product SQS Poll"
    },
    "Wait for Vendors": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Vendor SQS Poll"
    }
  }
}